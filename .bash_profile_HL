# Enable Color
export CLICOLOR=1
export LESS="-eirMX"

# Misc
alias reload="source $HOME/.bash_profile" # Reload bash profile.
alias python='echo "Recall- python aliased to python3" && python3'
alias p="python"
function cv {
	# Create and edit with vim.
	touch $1
	vim $1
}
function cc {
	# Create and edit with vs code.
	touch $1
	code $1
}
alias tree="tree -L "
alias boy="tldr"
alias rebuild_spotlight_index="sudo mdutil -E /"
alias reset_dock="killall -KILL Dock"

# Working Reset
function true_reset {
	clear && printf '\e[3J'
}
alias reset="true_reset"

# Specific Directory Paths
desk_path=$HOME/Desktop
downloads_path=$HOME/Downloads
journal_path=$HOME/Dropbox/Main/Primary/Journal
repos_path=$HOME/Documents/@MAIN_DOCUMENTS/@REPOS # REPOS: notes.txt and readme.txt - Nothing else
multi_path=$repos_path/Unity/MultiplayerTanks
snake_path=$repos_path/Unity/SnakeV2
macsetup_path=$repos_path/MyComputer/macsetup
dotfiles_path=$repos_path/MyComputer/dotfiles
web_path=$repos_path/Web/bpinzonegithubio
window_path=$repos_path/Other/WindowManager
vsccpp_path=$repos_path/vsccpp/
pro_path=$repos_path/Other/Pro_Programming
zelda_path=$repos_path/Classes/EECS494/Zelda
falcon_path=$repos_path/Classes/EECS494/FalconMissile
pinzone_w_path=$HOME/Dropbox/Main/Notes/pinzone_w.csv
vim_cheat_path=$pro_path/vim_cheatsheet.txt
bitbar_path=$HOME/Documents/BitBarPluggins
lec_281_path=$HOME/Documents/@MAIN_DOCUMENTS/College/UM/Fall2017/EECS281NonRepo

# Edit Specific Files
alias bp="vim $HOME/.bash_profile"
alias vimrc="vim $HOME/.vimrc"
alias todo="vim $macsetup_path/notes.txt"
alias commands="vim $macsetup_path/commands.txt"
alias short="code $macsetup_path/shortcuts.txt"
alias jevent="code $journal_path/events.txt"
alias mega="code $journal_path/mega-recollection.txt"
alias pinzone_w="vim $pinzone_w_path"
alias vimcheat="vim $vim_cheat_path"

# Grep Specific Files
function pwg {
	grep -i -C1 $1 $pinzone_w_path
}
function bpg {
	grep -i -C1 $1 $HOME/.bash_profile
}
function vcg {
	grep -i -C1 $1 $vim_cheat_path
}

# Manage Files
# Clean VSCode C++ Project
# Except delete git repo.
function cvsccpp {
	# Create VSCode CPP project
	cp -r $vsccpp_path ./new_vsccpp_project
	rm -f ./new_vsccpp_project/.gitignore
	rm -rf ./new_vsccpp_project/.git
	rm -f ./new_vsccpp_project/readme.txt
}
# Resume
resume_name="Ben_Pinzone_Resume.pdf"
resume_origin_path=$HOME/Documents/@MAIN_DOCUMENTS/Resume_and_College_Stuff/Newest_Resume/
resume_repo_path=$repos_path/Other/Resume/
resume_web_path=$web_path/downloads/
function sync_resume {
	if [ -f ${resume_repo_path}${resume_name} ]; then
		rm ${resume_repo_path}${resume_name}
	fi
	if [ -f ${resume_web_path}${resume_name} ]; then
		rm ${resume_web_path}${resume_name}
	fi
	cp $resume_origin_path$resume_name $resume_repo_path
	cp $resume_origin_path$resume_name $resume_web_path
}	

# Change Directory to Specific Paths
alias home="cd $HOME"
alias desk="cd $desk_path"
alias down="cd $downloads_path"
alias repos="cd $repos_path"
alias multi="cd $multi_path"
alias snake="cd $snake_path"
alias macsetup="cd $macsetup_path"
alias dotfiles="cd $dotfiles_path"
alias web="cd $web_path"
alias window="cd $window_path"
alias pro="cd $pro_path"
alias vsccpp="cd $vsccpp_path"
alias bitbar="cd $bitbar_path"
alias workdb="cd $HOME/Dropbox/Work"
alias lec_281="cd $lec_281_path"
alias zelda="cd $zelda_path"
alias falcon="cd $falcon_path"

alias o="open ./" # Open working directory in finder.
alias c="code ." # Open current working dir in vs code.
alias ca="code --add ." # Open current working dir in last active vs code window.
function pj {
	# cd to <class> <project> directory
	# Usage pj <class number> <project number>
	cd $repos_path/Classes/EECS${1}/EECS${1}P${2}
}
function pjc {
	# Open project in VSCode.
	pj $1 $2
	code .
}
function pjo {
	# Open project in Finder.
	pj $1 $2
	o
}

# Running
alias rcp="clear && make clean && make && ./main"

# List Files.
alias ls="ls -G"
alias l="ls -l"          # Preferred format.
alias la="ls -al"        # List all.
alias lh="ls -ld .?*"    # List hidden only.
alias cl="clear && l"
alias cla="clear && la"
alias clh="clear && lh"
alias ccl='cd "$1" && clear && l'
function lt {
	# List files of a certain type.
	# Usage: ltype <file_extension>"
	local search_pattern=".*\.$1"
	local search_pattern="\.$1$"
	local exclude_pattern="\.\."
	ls -al | grep -E "$search_pattern" | grep -E -v "$exclude_pattern"
}

# Window Manager
window_env_path=$window_path/window-env
function before_window {
	DIR_BEFORE_WINDOW_MANAGER_COMMAND=$(pwd)
	cd $window_env_path
	source ./bin/activate
}
function after_window {
	deactivate
	cd $DIR_BEFORE_WINDOW_MANAGER_COMMAND
}
function sw {
	# Save Windows
	before_window
	python3 ./window_manager/grab.py $1
	after_window
}
function mw {
	# Move Windows
	before_window
	python3 ./window_manager/set.py $1
	after_window
}

# Remote Actions
alias caen="ssh bpinzone@login.engin.umich.edu"
alias caenb1="ssh bpinzone@login.itd.umich.edu"

alias work="ssh work"
alias namecheap="ssh namecheap"
alias caenfile="sftp bpinzone@login.engin.umich.edu"

# Git
alias gs="git status"
alias gb="git branch"
alias gd="git diff"
alias eig="vim .gitignore"
alias egig="vim $HOME/.gitignore_global"
alias minor='git add . && git commit -m "minor" && git push'

# Grep
GREP_FLAGS="-r -n --color=auto"
alias grep="grep $GREP_FLAGS"
function gt {
	# Grep files of certain type.
	# Usage: greptype <file_extension> <search_text> <other flags> <other flags>...
	local file_type="$1" && shift
	local search_text="$1" && shift
	if [ "$file_type" == "all" ] ; then
		grep $GREP_FLAGS --include="*" "$search_text" . $@
	else
		grep $GREP_FLAGS --include="*.$file_type" "$search_text" . $@
	fi
}
alias allgrep="gt all $1 $@"
alias csgrep="gt cs $1 $@"
alias pygrep="gt py $1 $@"
alias cppgrep="gt cpp $1 $@"
alias hgrep="gt h $1 $@"

# Find
function fid {
	# Find in directory
	find . -iname "*$1*"
}

# VS Code Shortcuts
# Reminders
# code . // Open current folder in vscode.
# code --add <dir> // Adds dir folder to last active window.
alias vsdiff="code --diff $1 $2"

# Unity
alias scripts="cd Assets/Scripts/"
alias unity_template="code /Applications/Unity/Unity.app/Contents/Resources/ScriptTemplates/81-C#\ Script-NewBehaviourScript.cs.txt"
function clean_unity {
	if [ -d "Library" ]; then
		rm -r Library
	fi
	if [ -d "Temp" ]; then
		rm -r Temp
	fi
	if [ -d "obj" ]; then
		rm -r obj
	fi
}

# Prompt
# http://ezprompt.net
# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}
# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}
export PS1="\[\e[37m\]\u\[\e[m\]\[\e[31m\]@\[\e[m\]\[\e[37m\]\h\[\e[m\]\[\e[31;40m\]>\[\e[m\]\[\e[31m\]>\[\e[m\]\[\e[37m\]\W\[\e[m\]\[\e[31m\]:\[\e[m\]\[\e[37m\]\`parse_git_branch\`\[\e[m\] "

# Remove last login info.
reset

